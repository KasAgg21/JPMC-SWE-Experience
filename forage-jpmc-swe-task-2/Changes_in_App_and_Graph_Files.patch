Subject: [PATCH] Changes in App and Graph Files
---
Index: src/Graph.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Graph.tsx b/src/Graph.tsx
--- a/src/Graph.tsx	(revision 3022e1f02670f8336f457078532f98c50f77496e)
+++ b/src/Graph.tsx	(date 1686583456086)
@@ -14,7 +14,7 @@
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,17 @@
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('col-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('col','["Top-ask-price"]');
+      elem.setAttribute('aggregates',`
+      {
+      "stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"
+      }`);
     }
   }
 
Index: src/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/App.tsx b/src/App.tsx
--- a/src/App.tsx	(revision 3022e1f02670f8336f457078532f98c50f77496e)
+++ b/src/App.tsx	(date 1686583618139)
@@ -8,6 +8,7 @@
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,33 @@
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+  if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
   }
+  }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x=0;
+    const intervel = setInterval(()=>{
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+            this.setState({
+            data: serverResponds,
+            showGraph: true,
+            });
+       });
+       x++;
+       if(x>500)
+       {
+       clearInterval(intervel);
+       }
+  },100);
+    }
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+
 
   /**
    * Render the App react component
